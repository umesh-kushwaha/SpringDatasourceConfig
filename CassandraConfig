package com.umesh.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.cassandra.config.AbstractCassandraConfiguration;
import org.springframework.data.cassandra.config.CassandraClusterFactoryBean;
import org.springframework.data.cassandra.core.CassandraTemplate;
import org.springframework.data.cassandra.repository.config.EnableCassandraRepositories;



import lombok.Generated;
import lombok.Getter;

@Generated
@Configuration
@EnableCassandraRepositories
@Getter
public class CassandraConfig extends AbstractCassandraConfiguration {

	

	private final Environment environment;

	public CassandraConfig( Environment environment) {
		super();
		
		this.environment = environment;
	}

	@Override
	protected String getKeyspaceName() {
		return "abc";
	}

	@Override
	public String[] getEntityBasePackages() {
		return new String[] { "com.umesh.model.cassandra" };
	}

	@Bean(name = "cassandraTemplate")
	public CassandraTemplate profileCassandraTemplate() throws Exception {
		final CassandraTemplate cassandraTemplate = new CassandraTemplate(session().getObject(), cassandraConverter());
		return cassandraTemplate;
	}

	@Bean
	@Override
	public CassandraClusterFactoryBean cluster() {

		CassandraClusterFactoryBean cluster = new CassandraClusterFactoryBean();
		cluster.setUsername("cassandra");
		cluster.setPassword("cassandra");
		cluster.setContactPoints("127.0.0.1,127.0.0.2");
		cluster.setPort("9042");
		cluster.setJmxReportingEnabled(false);

		SocketOptions socketOptions = new SocketOptions();
		socketOptions
				.setConnectTimeoutMillis(1000);
		socketOptions.setReadTimeoutMillis(1000);
		cluster.setSocketOptions(socketOptions);

		return cluster;
	}

}
